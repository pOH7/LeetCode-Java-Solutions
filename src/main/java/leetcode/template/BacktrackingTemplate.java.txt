package leetcode.template;

import java.util.ArrayList;
import java.util.List;

/**
 * @author zhanglei
 * @version 2024/11/19
 */
public class BacktrackingTemplate {

    // Common template for combination/subset problems
    public List<List<Integer>> findCombinations(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrackCombination(result, new ArrayList<>(), nums, 0);
        return result;
    }

    private void backtrackCombination(List<List<Integer>> result, List<Integer> current, int[] nums, int start) {
        // Add current combination to result
        result.add(new ArrayList<>(current));

        // Try all possible next elements
        for (int i = start; i < nums.length; i++) {
            // Skip duplicates for sorted array (optional)
            if (i > start && nums[i] == nums[i-1]) continue;

            current.add(nums[i]);
            backtrackCombination(result, current, nums, i + 1);
            current.remove(current.size() - 1);
        }
    }

    // Common template for permutation problems
    public List<List<Integer>> findPermutations(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        boolean[] used = new boolean[nums.length];
        backtrackPermutation(result, new ArrayList<>(), nums, used);
        return result;
    }

    private void backtrackPermutation(List<List<Integer>> result, List<Integer> current, int[] nums, boolean[] used) {
        // Base case: permutation is complete
        if (current.size() == nums.length) {
            result.add(new ArrayList<>(current));
            return;
        }

        for (int i = 0; i < nums.length; i++) {
            // Skip if element is used or is a duplicate
            if (used[i] || (i > 0 && nums[i] == nums[i-1] && !used[i-1])) continue;

            used[i] = true;
            current.add(nums[i]);
            backtrackPermutation(result, current, nums, used);
            current.remove(current.size() - 1);
            used[i] = false;
        }
    }

    // Common template for path finding problems (e.g., maze, word search)
    private static final int[][] DIRECTIONS = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}}; // Up, Down, Left, Right

    public boolean findPath(char[][] grid) {
        int m = grid.length, n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        return backtrackPath(grid, 0, 0, visited);
    }

    private boolean backtrackPath(char[][] grid, int row, int col, boolean[][] visited) {
        // Base cases
        if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length) return false;
        if (visited[row][col] || grid[row][col] == '#') return false; // '#' represents obstacle
        if (/* reached destination */) return true;

        visited[row][col] = true;

        // Try all four directions
        for (int[] dir : DIRECTIONS) {
            int newRow = row + dir[0];
            int newCol = col + dir[1];
            if (backtrackPath(grid, newRow, newCol, visited)) return true;
        }

        visited[row][col] = false; // Backtrack
        return false;
    }

    // Example usage
    public static void main(String[] args) {
        BacktrackingTemplate bt = new BacktrackingTemplate();

        // Test combinations
        int[] nums = {1, 2, 3};
        System.out.println("Combinations: " + bt.findCombinations(nums));

        // Test permutations
        System.out.println("Permutations: " + bt.findPermutations(nums));

        // Test path finding
        char[][] grid = {
            {'.','.','#'},
            {'.','#','.'},
            {'.','.','.'}
        };
        System.out.println("Path exists: " + bt.findPath(grid));
    }
}
